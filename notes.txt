github onlineEntryForms
https://github.com/m-milmore/onLineEntryForms.git

            <div className="form-floating">
              <input
                type="text"
                className="form-control form-control-sm"
                id="studio"
                placeholder="studio"
                name="studio"
                value={id.studio}
                onChange={handleChange}
              />
              <label className="" htmlFor="studio">
                Studio
              </label>
            </div>

*******************************************

            <input
              type="text"
              className="form-control form-control-sm py-0"
              id="studentFirstName"
              placeholder="Prénom de l'élève"
              name="studentFirstName"
              value={ids.studentFirstName}
              onChange={handleChange}
            />

*****************************************

            <label className="label-id-section text-nowrap" htmlFor="studio">
              Studio :
            </label>
            <input
              type="text"
              className="form-control form-control-sm ps-0 pe-1 text-primary fw-bold"
              id="studio"
              name="studio"
              value={ids.studio}
              onChange={handleChange}
            />

***********************************************

    <select
      className="form-select border-white"
      name={name}
      onChange={handleChange}
      aria-label={label}
    >
      <option defaultValue disabled>{label}</option>
      {options.map((option) => {
        return (
          <option key={option} value={option}>
            {option}
          </option>
        );
      })}
    </select>

*************************************************

    <div className="dropdown">
      <button
        className="btn btn-secondary dropdown-toggle"
        type="button"
        data-bs-toggle="dropdown"
        aria-expanded="false"
      >
        {label}
      </button>
      <ul className="dropdown-menu">
        {options.map((option) => {
          return (
            <li key={option} value={option}>
              <a className="dropdown-item" href="#">
                {option}
              </a>
            </li>
          );
        })}
      </ul>
    </div>

*****************************************

            {/* {i === canadaDivisions - 1 && <Dropdown.Divider key="divider" />} */}

************************************

16px = 1rem = 12pt

********************************
importing font
	1- "CSS file imported from JS", 				shouldn't it say : "CSS file imported into JS"?
	2- "by default src/index.js imports src/index.css"			by default? we wouldn't need : "import './index.css'; if it was "by default", no?
	3- "For example, if you put a font in src/fonts/MyFont.woff"		.woff?
								when I put Swiss721 from the Windows Fonts folder, I get 14 .otf files
	4- "@font-face {...}"?					what does @font-face means in css?

	MDN			The @font-face CSS at-rule specifies a custom font with which to display text; 
				the font can be loaded from either a remote server or a locally-installed font on the user's own computer.

	Syntax:

				@font-face {
 					 font-family: "Open Sans";
 					 src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2"),
       					url("/fonts/OpenSans-Regular-webfont.woff") format("woff");
				}

	StackOverflow
				@font-face {
  					font-family: 'MyFont';
  					src: local('MyFont'), url(./fonts/MyFont.woff) format('woff');
  					/* other formats include: 'woff2', 'truetype, 'opentype', 'embedded-opentype', and 'svg' */
				}

				I don't have any of those formats, I have 14 files with .otf extension.

	"Normally this should be enough." (???)

******************************************

    <div
      className="d-flex flex-column flex-lg-row mb-5 flex-wrap flex-lg-nowrap
    justify-content-center justify-content-md-between"
    >
      <div
        className="d-flex flex-column align-items-center align-items-lg-start"
        style={{ color: "var(--ndcc-red)" }}
      >
        <div className="fs-4 fw-bold lh-sm text-decoration-underline">
          PRO-AM
        </div>
        <div className="fs-4 fw-bold lh-sm text-decoration-underline text-nowrap">
          DANSES INDIVIDUELLES
        </div>
      </div>
      <div className="d-flex flex-column align-items-center">
        <div style={{ width: "100px" }}>
          <img src={logo} alt="logo" />
        </div>
        <div className="fs-3 lh-sm text-center px-2 text-nowrap header-print">
          Championnat Canadien National
        </div>
      </div>
      <div className="position-relative ndcc-year-container">
        <div
          className="fs-3 fw-bolder ndcc-year"
          style={{ color: "var(--ndcc-pink)" }}
        >
          2022
        </div>
        {/* <div
          className="fs-4 fw-bolder position-absolute top-0 start-0 text-nowrap ndcc-dates"
          style={{ color: "var(--ndcc-red)" }}
        >
          26 27 28 AOÛT
        </div> */}
        {/* <img src={dates} alt="dates" /> */}
      </div>
    </div>

*****************************************

, whiteSpace: "nowrap" 


******************************************

  const handleSelect = ({ target: { name, value } }) => {
    setComps((prev) => ({
      ...prev,
      [name]: value,
    }));
  };


**********************************

  useEffect(() => {
    const onUpdateComps = ({
      dance,
      danceStyle,
      syllabus,
      newSelect: select,
    }) => {
      const comp = {
        dance,
        danceStyle,
        syllabus,
      };

      const categories = select
        ? [...comps.categories, comp]
        : comps.categories.filter(
            (obj) =>
              !(
                obj.dance === comp.dance &&
                obj.danceStyle === comp.danceStyle &&
                obj.syllabus === comp.syllabus
              )
          );

      setComps((prev) => ({
        ...prev,
        categories: categories,
      }));
    };

    const compListener = appEmitter.addListener("comp", onUpdateComps);

    return () => {
      compListener.remove();
    };
  }, [setComps, comps.categories]);

*******************************

        <button
          type="button"
          className="btn btn-primary"
          style={{padding: ".25rem .5rem", fontSize: ".75rem", textAlign: "left"}}
        >
          New row
        </button>

************************************

      style={{
        // borderRight: eol ? "1px solid black" : "none",
        // cursor: "pointer",
        // textDecoration: select ? "underline" : "none",
        // backgroundColor: select ? "rgba(0, 0, 0, .1)" : "white",
        // borderRadius: "100%",
        // padding: "1px",
        // verticalAlign: "middle",
      }}

***************************************

import { SignatureComponent, Signature } from "@syncfusion/ej2-react-inputs";
import { ButtonComponent } from "@syncfusion/ej2-react-buttons";

	let signObj = Signature | null;

			<div>
				<ButtonComponent>Save</ButtonComponent>
			</div>
        <SignatureComponent ref={}></SignatureComponent>






















