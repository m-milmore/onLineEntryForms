github onlineEntryForms
https://github.com/m-milmore/onLineEntryForms.git

            <div className="form-floating">
              <input
                type="text"
                className="form-control form-control-sm"
                id="studio"
                placeholder="studio"
                name="studio"
                value={id.studio}
                onChange={handleChange}
              />
              <label className="" htmlFor="studio">
                Studio
              </label>
            </div>

*******************************************

            <input
              type="text"
              className="form-control form-control-sm py-0"
              id="studentFirstName"
              placeholder="Prénom de l'élève"
              name="studentFirstName"
              value={ids.studentFirstName}
              onChange={handleChange}
            />

*****************************************

            <label className="label-id-section text-nowrap" htmlFor="studio">
              Studio :
            </label>
            <input
              type="text"
              className="form-control form-control-sm ps-0 pe-1 text-primary fw-bold"
              id="studio"
              name="studio"
              value={ids.studio}
              onChange={handleChange}
            />

***********************************************

    <select
      className="form-select border-white"
      name={name}
      onChange={handleChange}
      aria-label={label}
    >
      <option defaultValue disabled>{label}</option>
      {options.map((option) => {
        return (
          <option key={option} value={option}>
            {option}
          </option>
        );
      })}
    </select>

*************************************************

    <div className="dropdown">
      <button
        className="btn btn-secondary dropdown-toggle"
        type="button"
        data-bs-toggle="dropdown"
        aria-expanded="false"
      >
        {label}
      </button>
      <ul className="dropdown-menu">
        {options.map((option) => {
          return (
            <li key={option} value={option}>
              <a className="dropdown-item" href="#">
                {option}
              </a>
            </li>
          );
        })}
      </ul>
    </div>

*****************************************

            {/* {i === canadaDivisions - 1 && <Dropdown.Divider key="divider" />} */}

************************************

16px = 1rem = 12pt

********************************
importing font
	1- "CSS file imported from JS", 				shouldn't it say : "CSS file imported into JS"?
	2- "by default src/index.js imports src/index.css"			by default? we wouldn't need : "import './index.css'; if it was "by default", no?
	3- "For example, if you put a font in src/fonts/MyFont.woff"		.woff?
								when I put Swiss721 from the Windows Fonts folder, I get 14 .otf files
	4- "@font-face {...}"?					what does @font-face means in css?

	MDN			The @font-face CSS at-rule specifies a custom font with which to display text; 
				the font can be loaded from either a remote server or a locally-installed font on the user's own computer.

	Syntax:

				@font-face {
 					 font-family: "Open Sans";
 					 src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2"),
       					url("/fonts/OpenSans-Regular-webfont.woff") format("woff");
				}

	StackOverflow
				@font-face {
  					font-family: 'MyFont';
  					src: local('MyFont'), url(./fonts/MyFont.woff) format('woff');
  					/* other formats include: 'woff2', 'truetype, 'opentype', 'embedded-opentype', and 'svg' */
				}

				I don't have any of those formats, I have 14 files with .otf extension.

	"Normally this should be enough." (???)

******************************************

    <div
      className="d-flex flex-column flex-lg-row mb-5 flex-wrap flex-lg-nowrap
    justify-content-center justify-content-md-between"
    >
      <div
        className="d-flex flex-column align-items-center align-items-lg-start"
        style={{ color: "var(--ndcc-red)" }}
      >
        <div className="fs-4 fw-bold lh-sm text-decoration-underline">
          PRO-AM
        </div>
        <div className="fs-4 fw-bold lh-sm text-decoration-underline text-nowrap">
          DANSES INDIVIDUELLES
        </div>
      </div>
      <div className="d-flex flex-column align-items-center">
        <div style={{ width: "100px" }}>
          <img src={logo} alt="logo" />
        </div>
        <div className="fs-3 lh-sm text-center px-2 text-nowrap header-print">
          Championnat Canadien National
        </div>
      </div>
      <div className="position-relative ndcc-year-container">
        <div
          className="fs-3 fw-bolder ndcc-year"
          style={{ color: "var(--ndcc-pink)" }}
        >
          2022
        </div>
        {/* <div
          className="fs-4 fw-bolder position-absolute top-0 start-0 text-nowrap ndcc-dates"
          style={{ color: "var(--ndcc-red)" }}
        >
          26 27 28 AOÛT
        </div> */}
        {/* <img src={dates} alt="dates" /> */}
      </div>
    </div>

*****************************************

, whiteSpace: "nowrap" 


******************************************

  const handleSelect = ({ target: { name, value } }) => {
    setComps((prev) => ({
      ...prev,
      [name]: value,
    }));
  };


**********************************

  useEffect(() => {
    const onUpdateComps = ({
      dance,
      danceStyle,
      syllabus,
      newSelect: select,
    }) => {
      const comp = {
        dance,
        danceStyle,
        syllabus,
      };

      const categories = select
        ? [...comps.categories, comp]
        : comps.categories.filter(
            (obj) =>
              !(
                obj.dance === comp.dance &&
                obj.danceStyle === comp.danceStyle &&
                obj.syllabus === comp.syllabus
              )
          );

      setComps((prev) => ({
        ...prev,
        categories: categories,
      }));
    };

    const compListener = appEmitter.addListener("comp", onUpdateComps);

    return () => {
      compListener.remove();
    };
  }, [setComps, comps.categories]);

*******************************

        <button
          type="button"
          className="btn btn-primary"
          style={{padding: ".25rem .5rem", fontSize: ".75rem", textAlign: "left"}}
        >
          New row
        </button>

************************************

      style={{
        // borderRight: eol ? "1px solid black" : "none",
        // cursor: "pointer",
        // textDecoration: select ? "underline" : "none",
        // backgroundColor: select ? "rgba(0, 0, 0, .1)" : "white",
        // borderRadius: "100%",
        // padding: "1px",
        // verticalAlign: "middle",
      }}

***************************************

import { SignatureComponent, Signature } from "@syncfusion/ej2-react-inputs";
import { ButtonComponent } from "@syncfusion/ej2-react-buttons";

	let signObj = Signature | null;

			<div>
				<ButtonComponent>Save</ButtonComponent>
			</div>
        <SignatureComponent ref={}></SignatureComponent>

*************************************************

height: "32rem", 

************************************************

const greeting = (name) => {
    alert(`Hello, ${name}`);}

const processUserInput = (callback) => {
    
	const name = prompt("Please enter you name.");
    
	callback(name);

}

processUserInput(greeting);

						error: mis ` et ensuite '
						error: écris propmt au lieu de prompt

processUserInput((name) => {
    alert(`Hello, ${name}`);});	name va recevoir sa valeur dans le code de processUserInput et va être passé au callback qui est appellé dans la fonction processUserInput

						1-déclarer une fonction avec paramètres (au moins un, qui tiendra lieu de callback, la fonction devient ainsi une higher-order fonction)
						2-appeller ce callback quelque part dans le code de la higher-order fonction
						3-maintenant, dans le code principal, appeller la fonction higher-order
						4-définir le callback dans les arguments de l'appel de la higher-order fonction

						mais comment sait-on que la higher-order fonction aura les bons paramètres disponibles pour le callback? (name dans notre cas)
						et si on ne définit pas le callback dans les arguments de la higher-order fonction, comment sait-on que l'argument en question
						correspond à un callback?

Why do we use callback functions (as opposed to just putting all the code inside the higher-order function): for the principle of separation of concerns (among other things)

***********************************************

to have an error displayed on a unique field:
	1. delete collection
	2. make a field unique
	3. restart server
	4. create a document
	5. create another document but with the same field that is unique

**************************************************

  fs.readFile('/file-does-not-exist', (err, data) => {
    if (err) {
      next(err) // Pass errors to Express.
    } else {
      res.send(data)
    }
  })

*********************************************
the way to put a query for gte in the browser is member[gte]=10, 
which gives the object in the req.query as { member: { gte: '10'}}
now the syntax for MongoDB is { field: { $gte: value } }
so we have to modify the req.query object to look like the MongoDB syntax
and then send that object ot MongoDB to get the result that we want

{{URL}}/api/v1/entries/?limit=3&page=2&sort=dance&select=dance,danceStyle&danceStyle=rhythm&member[gte]=10

1) req.query:
	{
	  limit: '3',
	  page: '2',
	  sort: 'danceStyle,dance',
	  select: 'dance,danceStyle',
	  danceStyle: 'rhythm',
	  member: { gte: '10' }
	}

2) reqQuery (after removing select, sort, limit, page)
	{ danceStyle: 'rhythm', member: { gte: '10' } }

3) queryStr (after stringify reqQuery)		we need to put it in a string in order to use the string replace function
	{"danceStyle":"rhythm","member":{"gte":"10"}}

4) queryStr (after applying regex)		question: how come it work when we have characters not inside quotes, :,{} (??)
	{"danceStyle":"rhythm","member":{"$gte":"10"}}

5) queryStr (after JSON.parsing it)		now we put back the string into a json object
	{ danceStyle: 'rhythm', member: { '$gte': '10' } }

6) req.query.select & req.query.sort
	danceStyle,dance

7) the way MongoDB wants it => req.query.select.split(",").join(" "); => query = query.select(fields);
	danceStyle dance

**************************************************

			Authentication => authentification
identification => indicate a person identity
authentication => verifying that identity

jsonwebtoken
bcrypt.js
crypto included with Express?

***************************************************

MPA: whenever you request new content, the page has to reload all over again
MPAs are best suited for complex websites that do not require a continuation of approach.
For e.g. on Amazon, you dont require your page to stay the same when you want to view a product or category.

SPAs allow continuation, mobile-friendliness, and ease of access. Mobile apps are also developed on the same architecture as SPAs, 
so you can get the idea of how they complement the same experience as them.

But if creating an optimized information architecture is your priority to power a better user experience, then you need to opt for an MPA.

You can add as much content to it as you like. Continuing with the example of Amazon, the main user experience there is the number of products available on the platform.

So in terms of user experience, both MPAs and SPAs come good, and the variance here is subjective, based mostly upon what aim you have in mind to create the app.

XSS-Clean: This will sanitize any data in req.body, req.query, and req.params.
ex. { "title": "My title <script>Alert('Virus here')</script>" }, with XSS =>
{ "title": "My title &lt;script>Alert('Virus here')&lt;/script>" }

**************************************************

.center-display {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-itmes: center;
	width: 100%;
	height: 100vh;
}

**********************************************

.form {
  width: 100%;
  display: flex;
  flex-direction: column;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  border-radius: 5px;
  padding: 20px 20px 20px;
  overflow: hidden;
}

******************************

npm install => to install all the depencies in the package.json file

Dave Gray
The Net Ninja

*************************************

    setTimeout(() => {
      if (true) {
        appEmitter.emit("isLoggedIn", true);
        setProcessing(false);
        navigate("/");
      } else {
        setProcessing(false);
        setError("Sorry, you've entered an incorrect email or password.");
      }
    }, 500);

**************************

whenever we make changes to the service.js we must restart the app

**************************

"I believe that if he uses create-react-app there is no need to import dotenv" Stackoverflow
about: const BASE_URL = process.env.REACT_APP_BASE_URL;
	
















